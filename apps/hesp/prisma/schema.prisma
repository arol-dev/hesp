generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  role      UserRole  @default(STAFF)
  email     String    @unique
  password  String
  Trainee   Trainee[]
  picture Bytes?
}

model WOLcheckpoint {
  id                         Int      @id @default(autoincrement())
  createdAt                  DateTime @default(now())
  health                     Int
  healthFeel                 String
  healthImprove              String
  work                       Int
  workFeel                   String
  workImprove                String
  finances                   Int
  financesthFeel             String
  financesthImprove          String
  environment                Int
  environmentFeel            String
  environmentImprove         String
  love                       Int
  loveFeel                   String
  loveImprove                String
  familyFriends              Int
  familyFriendsFeel          String
  familyFriendsImprove       String
  personalDevelopment        Int
  personalDevelopmentFeel    String
  personalDevelopmentImprove String
  fun                        Int
  funFeel                    String
  funImprove                 String
  traineeId                  Int?
  trainee                    Trainee? @relation(fields: [traineeId], references: [id])
}

model PDCcheckpoint {
  id                 Int            @id @default(autoincrement())
  createdAt          DateTime       @default(now())
  trust              Int
  willFollow         Int
  retention          Int
  commitment         Int
  cv                 Int
  readyForInterviews Int
  advancement        Int
  traineeId          Int?
  trainee            Trainee?       @relation(fields: [traineeId], references: [id])
  SessionNotes       SessionNotes[]
}

model SessionNotes {
  id            String         @unique
  topic         String
  objective     String
  actions       String
  notes         String
  results       String
  evaluation    String
  checkpointId  Int?
  PDCcheckpoint PDCcheckpoint? @relation(fields: [checkpointId], references: [id])
}

model Trainee {
  id                 Int                  @id @default(autoincrement())
  firstName          String
  lastName           String
  email              String?
  phone              String?
  registerNumber     String?
  PDCcheckpoint      PDCcheckpoint[]
  WOLcheckpoint      WOLcheckpoint[]
  ProvidedSoloutions ProvidedSoloutions[]
  coachId            Int?
  User               User?                @relation(fields: [coachId], references: [id])
  TraineeMetaData    TraineeMetaData?
}

model TraineeMetaData {
  traineeId           Int              @id @default(autoincrement())
  workingSituation    WorkingSituation
  housingSituation    HousingSituation
  needWork            Boolean
  needTraining        Boolean
  needHousing         Boolean
  needCommunication   Boolean
  needLegal           Boolean
  needTransportation  Boolean
  needBasicAssistance Boolean
  needSOS             Boolean
  helpCandidate       Boolean
  filledForms         Boolean
  helpAccepted        Boolean
  trainee             Trainee          @relation(fields: [traineeId], references: [id])
}

model ProvidedSoloutions {
  id         Int          @id @default(autoincrement())
  code       String
  traineeId  Int?
  Trainee    Trainee?     @relation(fields: [traineeId], references: [id])
  Soloutions Soloutions[]
}

model Soloutions {
  id                 Int                 @id @default(autoincrement())
  code               String
  providedID         Int?
  ProvidedSoloutions ProvidedSoloutions? @relation(fields: [providedID], references: [id])
}

model InviteLink {
  id        Int      @id @default(autoincrement())
  code      String
  used      Boolean  @default(false)
  expiresAt DateTime
}

enum UserRole {
  ADMIN
  STAFF
}

enum WorkingSituation {
  WORKING
  NOT_WORKING
}

enum HousingSituation {
  HOMELESS
  HOUSE
  APARTMENT
  OTHER
}
